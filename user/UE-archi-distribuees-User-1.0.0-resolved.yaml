---
openapi: 3.1.0
info:
  title: User API
  description: This is the API of the User service
  contact:
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /:
    get:
      tags:
      - developers
      summary: home page of the service
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1 style='color:blue'>Welcome to the User service!</h1>
  /users:
    get:
      tags:
      - developers
      summary: get all the users
      description: Use this route for getting all the user of the DataBase !
      operationId: get_all
      responses:
        "200":
          description: All the users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersCollection'
    post:
      tags:
      - admins
      summary: add a new user
      description: Add a new user regarding the first and last name parameters. Can't create two identical users (same first and last name)
      operationId: create_user
      requestBody:
        description: user to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        "200":
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        "400":
          description: attribut name missing
        "409":
          description: user ID already exists
  /users/{id}:
    get:
      tags:
      - developers
      summary: get the user by its id
      description: By passing in the appropriate options, you can get info of a User
      operationId: get_user_byid
      parameters:
      - name: id
        in: path
        description: User ID.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User get by the id of the parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        "400":
          description: user ID don't exists
    put:
      tags:
      - developers
      summary: update or create user by id
      description: update the user by the id passed in parameter, if ID don't exist, create a new one
      operationId: create_update_user
      parameters:
      - name: id
        in: path
        description: User ID.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User just created / updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        "400":
          description: attribut name missing
    delete:
      tags:
      - developers
      summary: delete user by id
      description: delete user by the ID passed in parameter
      operationId: delete_user_by_id
      parameters:
      - name: id
        in: path
        description: User ID.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User just deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        "400":
          description: there is no user to delete for this id


  # movie delegation

  /movies/{movieid}:
    get:
      tags:
      - developers
      summary: get the movie by its id
      description: By passing in the appropriate options, you can get info of a Movie
      operationId: get_movie_byid
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Movie description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "400":
          description: bad input parameter
    post:
      tags:
      - admins
      summary: add a movie item
      description: Adds a movie to the system
      operationId: create_movie
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieItem'
      responses:
        "200":
          description: Movie created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "409":
          description: an existing item already exists
    delete:
      tags:
      - admins
      summary: delete a movie item
      description: Adds a movie to the system
      operationId: del_movie
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: item deleted
        "400":
          description: ID not found
  /moviesbytitle:
    get:
      tags:
      - developers
      summary: get the movie by its title
      description: |
        By passing in the appropriate options, you can get Movie info
      operationId: get_movie_bytitle
      parameters:
      - name: title
        in: query
        description: pass a title
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Movie item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "400":
          description: bad input parameter
  /moviesbyDirector:
    get:
      tags:
      - developers
      summary: get one or multiple movies by them directors
      description: By passing in the appropriate options, you can get all the movies of an director
      operationId: get_movie_byDirector
      parameters:
      - name: movieDirector
        in: path
        description: Director of movies.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of all the movies directed by the director
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviesCollection'
        "400":
          description: no movies for this director
  /movies/{movieid}/{rate}:
    put:
      tags:
      - admins
      summary: update a movie rate
      description: update the rating of a movie
      operationId: update_movie_rating
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rate
        in: path
        description: Movie rating.
        required: true
        style: simple
        explode: false
        schema:
          maximum: 10
          minimum: 0
          type: float
      responses:
        "200":
          description: rate updated
        "400":
          description: movie ID not found
  

  #showtimes delegation

  /showtimes:
    get:
      tags:
      - developers
      summary: get the full JSON database
      operationId: get_schedule
      responses:
        "200":
          description: full JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllSchedule'
  /showmovies/{date}:
    get:
      tags:
      - developers
      summary: get the schedule by date
      operationId: get_movies_bydate
      parameters:
      - name: date
        in: path
        description: date.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        "400":
          description: bad input parameter


components:
  schemas:
    UsersCollection:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UserItem'
    UserItem:
      type: object
      required:
        - id
        - name
        - last_active
      properties:
        id:
          type: string
          example: peter_curley
        name:
          type: string
          example: Peter Curley
        last_active:
          type: integer
          example: 1360031222
    NewUser:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Peter Curley

    # Movie Component

    MoviesCollection:
      type: object
      required:
        - movies
      properties:
        movies:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/MovieItem'
    MovieItem:
      type: object
      required:
        - title
        - rating
        - director
        - id
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: float
          example: 7.0
        director:
          type: string
          example: Paul McGuigan
        id:
          type: string
          example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab

    #showtimes component

    AllSchedule:
      required:
      - schedule
      type: object
      properties:
        schedule:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
    Schedule:
      required:
      - date
      - movies
      type: object
      properties:
        date:
          type: string
          example: "20151130"
        movies:
          type: array
          items:
            type: string
            example: 720d006c-3a57-4b6a-b18f-9b713b073f3c